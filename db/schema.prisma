// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email          String    @unique
  hashedPassword String?
  role           String    @default("USER")
  avatar         Json?
  tokens         Token[]
  sessions       Session[]

  memberships Membership[]
  categories  Category[]

  workflows Workflow[]
  stages    Stage[]

  forms     Form[]
  questions Question[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  lastFour    String?
  type        TokenType
  expiresAt   DateTime
  sentTo      String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  job   Job?    @relation(fields: [jobId], references: [id])
  jobId String?

  @@unique([hashedToken, type])
}

enum TokenType {
  RESET_PASSWORD
  INVITE_TOKEN
  PUBLIC_KEY
  SECRET_KEY
}

model Job {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description Json?
  slug        String @unique

  stripeCustomerId       String?   @unique
  stripeSubscriptionId   String?   @unique
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?

  tokens      Token[]
  memberships Membership[]

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  workflow   Workflow? @relation(fields: [workflowId], references: [id])
  workflowId String?
  Form       Form?     @relation(fields: [formId], references: [id])
  formId     String?

  candidates Candidate[]
}

enum MembershipRole {
  OWNER
  ADMIN
  USER
}

model Membership {
  id   Int            @id @default(autoincrement())
  role MembershipRole

  job   Job    @relation(fields: [jobId], references: [id])
  jobId String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([userId, jobId])
}

model Category {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  slug String @unique

  user   User @relation(fields: [userId], references: [id])
  userId Int

  jobs Job[]

  @@unique([userId, name])
}

model Workflow {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  slug String @unique

  stages WorkflowStage[]
  jobs   Job[]

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([userId, name])
}

model Stage {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  slug String @unique

  workflows WorkflowStage[]

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([userId, name])
}

model WorkflowStage {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order Int

  workflow   Workflow @relation(fields: [workflowId], references: [id])
  workflowId String

  stage   Stage  @relation(fields: [stageId], references: [id])
  stageId String

  @@unique([workflowId, stageId])
  @@unique([workflowId, stageId, order])
}

model Form {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  slug String @unique

  questions FormQuestion[]
  jobs      Job[]

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([userId, name])
}

model Question {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  info        String           @default("")
  placeholder String           @default("")
  type        QuestionType     @default(Single_line_text)
  options     QuestionOption[]
  required    Boolean          @default(false)
  hidden      Boolean          @default(false)

  slug String @unique

  forms FormQuestion[]

  user   User @relation(fields: [userId], references: [id])
  userId Int

  answers Answer[]

  @@unique([userId, name])
}

model QuestionOption {
  id        String   @id @default(cuid()) // value
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text String

  question   Question @relation(fields: [questionId], references: [id])
  questionId String
}

enum QuestionType {
  Single_line_text
  Long_text
  Attachment
  Checkbox
  Multiple_select
  Single_select
  Date
  Phone_number
  Email
  URL
  Number
  Rating
}

model FormQuestion {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order Int

  form   Form   @relation(fields: [formId], references: [id])
  formId String

  question   Question @relation(fields: [questionId], references: [id])
  questionId String

  @@unique([formId, questionId])
  @@unique([formId, questionId, order])
}

model Answer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  answer String

  question   Question @relation(fields: [questionId], references: [id])
  questionId String

  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId String

  @@unique([candidateId, questionId])
  @@unique([candidateId, questionId, answer])
}

model Candidate {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  answers Answer[]

  job   Job    @relation(fields: [jobId], references: [id])
  jobId String
}
