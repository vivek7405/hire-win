// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name           String
  email          String    @unique
  hashedPassword String?
  role           UserRole  @default(USER)
  tokens         Token[]
  sessions       Session[]

  // stripeCustomerId       String?   @unique
  // stripeSubscriptionId   String?   @unique
  // stripePriceId          String?
  // stripeCurrentPeriodEnd DateTime?

  companies CompanyUser[]
  jobs      JobUser[]

  // categories     Category[]

  // workflows Workflow[]
  // stages    Stage[]

  // forms     Form[]
  // questions Question[]

  // scoreCards    ScoreCard[]
  // cardQuestions CardQuestion[]

  calendars        Calendar[]
  defaultCalendars DefaultCalendar[]
  schedules        Schedule[]

  interviewDetails         InterviewDetail[]
  organizerInterviews      Interview[]       @relation(name: "organizerInterviews")
  interviewerInterviews    Interview[]       @relation(name: "interviewerInterviews")
  otherAttendeeInterview   Interview?        @relation(fields: [otherAttendeeInterviewId], references: [id])
  otherAttendeeInterviewId Int?

  comments Comment[]
  emails   Email[]

  // emailTemplates EmailTemplate[]
  // candidatePools CandidatePool[]
}

enum UserRole {
  ADMIN
  USER
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  lastFour    String?
  type        TokenType
  expiresAt   DateTime
  sentTo      String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  job   Job?    @relation(fields: [jobId], references: [id])
  jobId String?

  company   Company? @relation(fields: [companyId], references: [id])
  companyId Int?

  @@unique([hashedToken, type])
}

enum TokenType {
  RESET_PASSWORD
  INVITE_TO_COMPANY_TOKEN
  INVITE_TO_JOB_TOKEN
  PUBLIC_KEY
  SECRET_KEY
}

enum SalaryType {
  HOUR
  DAY
  WEEK
  MONTH
  YEAR
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACTOR
  TEMPORARY
  INTERN
  VOLUNTEER
  PER_DIEM
  OTHER
}

enum CompanyUserRole {
  OWNER
  ADMIN
  USER
}

model CompanyUser {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role CompanyUserRole

  user   User @relation(fields: [userId], references: [id])
  userId Int

  company   Company @relation(fields: [companyId], references: [id])
  companyId Int

  @@unique([userId, companyId])
}

model Company {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name    String
  slug    String  @unique
  info    Json?
  website String?
  logo    Json?
  theme   String? @default("indigo")

  tokens Token[]

  users CompanyUser[]
  jobs  Job[]

  categories Category[]

  workflows Workflow[]
  stages    Stage[]

  forms     Form[]
  questions Question[]

  scoreCards    ScoreCard[]
  cardQuestions CardQuestion[]

  emailTemplates EmailTemplate[]
  candidatePools CandidatePool[]

  stripeCustomerId       String?   @unique
  stripeSubscriptionId   String?   @unique
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?
}

model Job {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String
  slug  String @unique

  country String
  state   String
  city    String

  remote     Boolean
  hidden     Boolean @default(false)
  showSalary Boolean @default(false)

  currency   String
  minSalary  Int
  maxSalary  Int
  salaryType SalaryType

  employmentType EmploymentType[]
  validThrough   DateTime?
  description    Json?

  tokens Token[]
  users  JobUser[]

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  workflow   Workflow? @relation(fields: [workflowId], references: [id])
  workflowId String?

  form   Form?   @relation(fields: [formId], references: [id])
  formId String?

  scoreCards ScoreCardJobWorkflowStage[]

  interviewDetails InterviewDetail[]
  candidates       Candidate[]

  company   Company @relation(fields: [companyId], references: [id])
  companyId Int
}

model InterviewDetail {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  interviewer   User @relation(fields: [interviewerId], references: [id])
  interviewerId Int

  duration Int

  schedule   Schedule @relation(fields: [scheduleId], references: [id])
  scheduleId Int

  calendar   Calendar? @relation(fields: [calendarId], references: [id])
  calendarId Int?

  interviews Interview[]

  job   Job    @relation(fields: [jobId], references: [id])
  jobId String

  workflowStage   WorkflowStage @relation(fields: [workflowStageId], references: [id])
  workflowStageId String

  @@unique([interviewerId, jobId, workflowStageId])
}

enum JobUserRole {
  OWNER
  ADMIN
  USER
}

model JobUser {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role JobUserRole

  job   Job    @relation(fields: [jobId], references: [id])
  jobId String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([userId, jobId])
}

model Category {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  slug String @unique

  // user   User @relation(fields: [userId], references: [id])
  // userId Int

  company   Company @relation(fields: [companyId], references: [id])
  companyId Int

  jobs Job[]

  @@unique([companyId, name])
}

model Workflow {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  slug String @unique

  stages WorkflowStage[]
  jobs   Job[]

  // user   User @relation(fields: [userId], references: [id])
  // userId Int

  company   Company @relation(fields: [companyId], references: [id])
  companyId Int

  @@unique([companyId, name])
}

model Stage {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  slug String @unique

  allowEdit Boolean @default(true)

  workflows WorkflowStage[]

  // user   User @relation(fields: [userId], references: [id])
  // userId Int

  company   Company @relation(fields: [companyId], references: [id])
  companyId Int

  @@unique([companyId, name])
}

model WorkflowStage {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order Int

  workflow   Workflow @relation(fields: [workflowId], references: [id])
  workflowId String

  stage   Stage  @relation(fields: [stageId], references: [id])
  stageId String

  scoreCards ScoreCardJobWorkflowStage[]
  scores     Score[]

  interviewDetails InterviewDetail[]
  candidates       Candidate[]
  comments         Comment[]
  emails           Email[]

  @@unique([workflowId, stageId])
  @@unique([workflowId, stageId, order])
}

model Form {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  slug String @unique

  questions FormQuestion[]
  jobs      Job[]

  // user   User @relation(fields: [userId], references: [id])
  // userId Int

  company   Company @relation(fields: [companyId], references: [id])
  companyId Int

  @@unique([companyId, name])
}

model Question {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name          String
  placeholder   String           @default("")
  type          QuestionType     @default(Single_line_text)
  options       QuestionOption[]
  acceptedFiles String           @default("")

  factory Boolean @default(false)

  slug String @unique

  // user   User @relation(fields: [userId], references: [id])
  // userId Int

  company   Company @relation(fields: [companyId], references: [id])
  companyId Int

  forms   FormQuestion[]
  answers Answer[]

  @@unique([companyId, name])
}

model ScoreCard {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  slug String @unique

  cardQuestions ScoreCardQuestion[]

  jobWorkflowStages ScoreCardJobWorkflowStage[]

  // user   User @relation(fields: [userId], references: [id])
  // userId Int

  company   Company @relation(fields: [companyId], references: [id])
  companyId Int

  @@unique([companyId, name])
}

model CardQuestion {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name    String
  factory Boolean @default(false)

  slug String @unique

  // user   User @relation(fields: [userId], references: [id])
  // userId Int

  company   Company @relation(fields: [companyId], references: [id])
  companyId Int

  scoreCards ScoreCardQuestion[]

  @@unique([companyId, name])
}

model ScoreCardQuestion {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order              Int
  behaviour          ScoreCardQuestionBehaviour @default(OPTIONAL)
  allowBehaviourEdit Boolean                    @default(true)

  scoreCard   ScoreCard @relation(fields: [scoreCardId], references: [id])
  scoreCardId String

  cardQuestion   CardQuestion @relation(fields: [cardQuestionId], references: [id])
  cardQuestionId String

  scores Score[]

  @@unique([scoreCardId, cardQuestionId])
  @@unique([scoreCardId, cardQuestionId, order])
}

enum ScoreCardQuestionBehaviour {
  REQUIRED
  OPTIONAL
  OFF
}

model ScoreCardJobWorkflowStage {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  scoreCard   ScoreCard @relation(fields: [scoreCardId], references: [id])
  scoreCardId String

  job   Job    @relation(fields: [jobId], references: [id])
  jobId String

  workflowStage   WorkflowStage @relation(fields: [workflowStageId], references: [id])
  workflowStageId String

  @@unique([scoreCardId, jobId, workflowStageId])
}

model Score {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rating Int
  note   String?

  scoreCardQuestion   ScoreCardQuestion @relation(fields: [scoreCardQuestionId], references: [id])
  scoreCardQuestionId String

  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId String

  workflowStage   WorkflowStage @relation(fields: [workflowStageId], references: [id])
  workflowStageId String

  @@unique([candidateId, scoreCardQuestionId, workflowStageId])
}

model QuestionOption {
  id        String   @id @default(cuid()) // value
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text String

  question   Question @relation(fields: [questionId], references: [id])
  questionId String
}

enum QuestionType {
  Single_line_text
  Long_text
  Attachment
  Checkbox
  Multiple_select
  Single_select
  Date
  Phone_number
  Email
  URL
  Number
  Rating
}

model FormQuestion {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order              Int
  behaviour          FormQuestionBehaviour @default(OPTIONAL)
  allowBehaviourEdit Boolean               @default(true)

  form   Form   @relation(fields: [formId], references: [id])
  formId String

  question   Question @relation(fields: [questionId], references: [id])
  questionId String

  @@unique([formId, questionId])
  @@unique([formId, questionId, order])
}

enum FormQuestionBehaviour {
  REQUIRED
  OPTIONAL
  OFF
}

model Answer {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  value String

  question   Question @relation(fields: [questionId], references: [id])
  questionId String

  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId String

  @@unique([candidateId, questionId])
  @@unique([candidateId, questionId, value])
}

model Candidate {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name   String
  email  String
  resume Json?

  workflowStage   WorkflowStage? @relation(fields: [workflowStageId], references: [id])
  workflowStageId String?

  slug String @unique

  answers Answer[]
  scores  Score[]

  source CandidateSource

  job   Job    @relation(fields: [jobId], references: [id])
  jobId String

  interviews     Interview[]
  comments       Comment[]
  emails         Email[]
  candidatePools CandidatePool[]

  @@unique([jobId, email])
}

enum CandidateSource {
  Manual
  Job_Board
  LinkedIn
}

model DefaultCalendar {
  id         Int      @id @default(autoincrement())
  userId     Int      @unique
  user       User     @relation(fields: [userId], references: [id])
  calendarId Int
  calendar   Calendar @relation(fields: [calendarId], references: [id])
}

enum CalendarType {
  CaldavDigest
  CaldavBasic
  GoogleCalendar
  OutlookCalendar
}

model Calendar {
  id                Int               @id @default(autoincrement())
  name              String
  caldavAddress     String?
  username          String?
  encryptedPassword String?
  refreshToken      String?
  owner             User              @relation(fields: [ownerId], references: [id])
  ownerId           Int
  type              CalendarType
  defaultCalendars  DefaultCalendar[]
  // meetings          Meeting[]
  interviewDetails  InterviewDetail[]

  @@unique([ownerId, name])
}

// model Meeting {
//   id                         Int               @id @default(autoincrement())
//   name                       String
//   link                       String
//   owner                      User              @relation(fields: [ownerName], references: [slug])
//   ownerName                  String
//   description                String
//   duration                   Int
//   startDateUTC               DateTime
//   endDateUTC                 DateTime
//   schedule                   Schedule          @relation(fields: [scheduleId], references: [id])
//   scheduleId                 Int
//   location                   String
//   bookings                   Booking[]
//   defaultCalendar   Calendar @relation(fields: [defaultCalendarId], references: [id])
//   defaultCalendarId Int
// }

model DailySchedule {
  id         Int      @id @default(autoincrement())
  day        String
  startTime  String
  endTime    String
  schedule   Schedule @relation(fields: [scheduleId], references: [id])
  scheduleId Int
}

model Schedule {
  id               Int               @id @default(autoincrement())
  name             String
  timezone         String
  dailySchedules   DailySchedule[]
  owner            User              @relation(fields: [ownerId], references: [id])
  ownerId          Int
  // meetings       Meeting[]
  interviewDetails InterviewDetail[]

  @@unique([ownerId, name])
}

model Interview {
  id                Int             @id @default(autoincrement())
  // meeting      Meeting  @relation(fields: [meetingId], references: [id])
  // meetingId    Int
  interviewDetail   InterviewDetail @relation(fields: [interviewDetailId], references: [id])
  interviewDetailId String
  candidate         Candidate       @relation(fields: [candidateId], references: [id])
  candidateId       String
  // inviteeEmail      String
  organizer         User            @relation(fields: [organizerId], references: [id], name: "organizerInterviews")
  organizerId       Int
  interviewer       User            @relation(fields: [interviewerId], references: [id], name: "interviewerInterviews")
  interviewerId     Int
  otherAttendees    User[]
  startDateUTC      DateTime
  duration          Int
  cancelCode        String
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text String

  creator   User @relation(fields: [creatorId], references: [id])
  creatorId Int

  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId String

  workflowStage   WorkflowStage @relation(fields: [workflowStageId], references: [id])
  workflowStageId String

  parentComment   Comment?  @relation(fields: [parentCommentId], references: [id], name: "childComments", onDelete: Cascade)
  parentCommentId String?
  childComments   Comment[] @relation(name: "childComments")
}

model EmailTemplate {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subject String
  slug    String @unique
  body    Json

  // user   User @relation(fields: [userId], references: [id])
  // userId Int

  company   Company @relation(fields: [companyId], references: [id])
  companyId Int

  emails Email[]

  @@unique([companyId, subject])
}

model Email {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subject String
  cc      String?
  slug    String  @unique
  body    Json

  templateUsed EmailTemplate? @relation(fields: [templateId], references: [id])
  templateId   String?

  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId String

  workflowStage   WorkflowStage @relation(fields: [workflowStageId], references: [id])
  workflowStageId String

  sender   User @relation(fields: [senderId], references: [id])
  senderId Int
}

model CandidatePool {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  slug String @unique

  // user   User @relation(fields: [userId], references: [id])
  // userId Int

  company   Company @relation(fields: [companyId], references: [id])
  companyId Int

  candidates Candidate[]

  @@unique([companyId, name])
}
