// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email          String    @unique
  companyName    String
  companyInfo    Json?
  website        String?
  logo           Json?
  theme          String?   @default("indigo")
  slug           String    @unique
  hashedPassword String?
  role           UserRole  @default(USER)
  tokens         Token[]
  sessions       Session[]

  stripeCustomerId       String?   @unique
  stripeSubscriptionId   String?   @unique
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?

  memberships Membership[]
  categories  Category[]

  workflows Workflow[]
  stages    Stage[]

  forms     Form[]
  questions Question[]

  scoreCards    ScoreCard[]
  cardQuestions CardQuestion[]
}

enum UserRole {
  ADMIN
  USER
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  lastFour    String?
  type        TokenType
  expiresAt   DateTime
  sentTo      String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  job   Job?    @relation(fields: [jobId], references: [id])
  jobId String?

  @@unique([hashedToken, type])
}

enum TokenType {
  RESET_PASSWORD
  INVITE_TOKEN
  PUBLIC_KEY
  SECRET_KEY
}

enum SalaryType {
  HOUR
  DAY
  WEEK
  MONTH
  YEAR
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACTOR
  TEMPORARY
  INTERN
  VOLUNTEER
  PER_DIEM
  OTHER
}

model Job {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String
  slug  String @unique

  country String
  state   String
  city    String

  remote Boolean
  hidden Boolean @default(false)

  currency   String
  minSalary  Int
  maxSalary  Int
  salaryType SalaryType

  employmentType EmploymentType[]
  validThrough   DateTime?
  description    Json?

  tokens      Token[]
  memberships Membership[]

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  workflow   Workflow? @relation(fields: [workflowId], references: [id])
  workflowId String?

  form   Form?   @relation(fields: [formId], references: [id])
  formId String?

  scoreCards ScoreCardJobWorkflowStage[]
  candidates Candidate[]
}

enum MembershipRole {
  OWNER
  ADMIN
  USER
}

model Membership {
  id   Int            @id @default(autoincrement())
  role MembershipRole

  job   Job    @relation(fields: [jobId], references: [id])
  jobId String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([userId, jobId])
}

model Category {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  slug String @unique

  user   User @relation(fields: [userId], references: [id])
  userId Int

  jobs Job[]

  @@unique([userId, name])
}

model Workflow {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  slug String @unique

  stages WorkflowStage[]
  jobs   Job[]

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([userId, name])
}

model Stage {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  slug String @unique

  allowEdit Boolean @default(true)

  workflows WorkflowStage[]

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([userId, name])
}

model WorkflowStage {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order Int

  workflow   Workflow @relation(fields: [workflowId], references: [id])
  workflowId String

  stage   Stage  @relation(fields: [stageId], references: [id])
  stageId String

  scoreCards ScoreCardJobWorkflowStage[]

  candidates Candidate[]

  @@unique([workflowId, stageId])
  @@unique([workflowId, stageId, order])
}

model Form {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  slug String @unique

  questions FormQuestion[]
  jobs      Job[]

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([userId, name])
}

model Question {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name          String
  placeholder   String           @default("")
  type          QuestionType     @default(Single_line_text)
  options       QuestionOption[]
  acceptedFiles String           @default("")

  factory Boolean @default(false)

  slug String @unique

  user   User @relation(fields: [userId], references: [id])
  userId Int

  forms   FormQuestion[]
  answers Answer[]

  @@unique([userId, name])
}

model ScoreCard {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  slug String @unique

  cardQuestions ScoreCardQuestion[]

  jobWorkflowStages ScoreCardJobWorkflowStage[]

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([userId, name])
}

model CardQuestion {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name    String
  factory Boolean @default(false)

  slug String @unique

  user   User @relation(fields: [userId], references: [id])
  userId Int

  scoreCards ScoreCardQuestion[]

  @@unique([userId, name])
}

model ScoreCardQuestion {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order              Int
  behaviour          ScoreCardQuestionBehaviour @default(OPTIONAL)
  allowBehaviourEdit Boolean                    @default(true)

  scoreCard   ScoreCard @relation(fields: [scoreCardId], references: [id])
  scoreCardId String

  cardQuestion   CardQuestion @relation(fields: [cardQuestionId], references: [id])
  cardQuestionId String

  evaluations Evaluation[]

  @@unique([scoreCardId, cardQuestionId])
  @@unique([scoreCardId, cardQuestionId, order])
}

enum ScoreCardQuestionBehaviour {
  REQUIRED
  OPTIONAL
  OFF
}

model ScoreCardJobWorkflowStage {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  scoreCard   ScoreCard @relation(fields: [scoreCardId], references: [id])
  scoreCardId String

  job   Job    @relation(fields: [jobId], references: [id])
  jobId String

  workflowStage   WorkflowStage @relation(fields: [workflowStageId], references: [id])
  workflowStageId String

  @@unique([scoreCardId, jobId])
}

model Evaluation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rating Int
  note   String

  scoreCardQuestion   ScoreCardQuestion @relation(fields: [scoreCardQuestionId], references: [id])
  scoreCardQuestionId String

  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId String

  @@unique([candidateId, scoreCardQuestionId])
}

model QuestionOption {
  id        String   @id @default(cuid()) // value
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text String

  question   Question @relation(fields: [questionId], references: [id])
  questionId String
}

enum QuestionType {
  Single_line_text
  Long_text
  Attachment
  Checkbox
  Multiple_select
  Single_select
  Date
  Phone_number
  Email
  URL
  Number
  Rating
}

model FormQuestion {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order              Int
  behaviour          FormQuestionBehaviour @default(OPTIONAL)
  allowBehaviourEdit Boolean               @default(true)

  form   Form   @relation(fields: [formId], references: [id])
  formId String

  question   Question @relation(fields: [questionId], references: [id])
  questionId String

  @@unique([formId, questionId])
  @@unique([formId, questionId, order])
}

enum FormQuestionBehaviour {
  REQUIRED
  OPTIONAL
  OFF
}

model Answer {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  value String

  question   Question @relation(fields: [questionId], references: [id])
  questionId String

  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId String

  @@unique([candidateId, questionId])
  @@unique([candidateId, questionId, value])
}

model Candidate {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name   String
  email  String
  resume Json?

  workflowStage   WorkflowStage? @relation(fields: [workflowStageId], references: [id])
  workflowStageId String?

  slug String @unique

  answers     Answer[]
  evaluations Evaluation[]

  source CandidateSource

  job   Job    @relation(fields: [jobId], references: [id])
  jobId String

  @@unique([jobId, email])
}

enum CandidateSource {
  Manual
  Job_Board
  LinkedIn
}
