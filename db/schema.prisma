// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name           String
  email          String    @unique
  hashedPassword String?
  role           UserRole  @default(USER)
  tokens         Token[]
  sessions       Session[]

  companies CompanyUser[]
  jobs      JobUser[]

  calendars        Calendar[]
  defaultCalendars DefaultCalendar[]
  schedules        Schedule[]

  interviewDetails         InterviewDetail[]
  organizerInterviews      Interview[]       @relation(name: "organizerInterviews")
  interviewerInterviews    Interview[]       @relation(name: "interviewerInterviews")
  otherAttendeeInterview   Interview?        @relation(fields: [otherAttendeeInterviewId], references: [id])
  otherAttendeeInterviewId String?

  interviewCandidates CandidateWorkflowStageInterviewer[]

  comments Comment[]
  emails   Email[]

  jobUserScheduleCalendars JobUserScheduleCalendar[]

  createdJobs           Job[]
  createdCategories     Category[]
  createdWorkflows      Workflow[]
  createdStages         Stage[]
  createdForms          Form[]
  createdQuestions      Question[]
  createdScoreCards     ScoreCard[]
  createdCardQuestions  CardQuestion[]
  createdCandidates     Candidate[]
  createdEmailTemplates EmailTemplate[]
  createdCandidatePools CandidatePool[]
}

enum UserRole {
  ADMIN
  USER
}

model Session {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Token {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  hashedToken String
  lastFour    String?
  type        TokenType
  expiresAt   DateTime
  sentTo      String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  job   Job?    @relation(fields: [jobId], references: [id])
  jobId String?

  company   Company? @relation(fields: [companyId], references: [id])
  companyId String?

  @@unique([hashedToken, type])
}

enum TokenType {
  RESET_PASSWORD
  INVITE_TO_COMPANY
  INVITE_TO_JOB
  PUBLIC_KEY
  SECRET_KEY
  CONFIRM_EMAIL
}

enum SalaryType {
  HOUR
  DAY
  WEEK
  MONTH
  YEAR
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACTOR
  TEMPORARY
  INTERN
  VOLUNTEER
  PER_DIEM
  OTHER
}

enum CompanyUserRole {
  OWNER
  ADMIN
  USER
}

model CompanyUser {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role CompanyUserRole

  user   User   @relation(fields: [userId], references: [id])
  userId String

  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  @@unique([userId, companyId])
}

model Company {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name    String
  slug    String  @unique
  info    Json?
  website String?
  logo    Json?
  theme   String? @default("indigo")

  tokens Token[]

  users CompanyUser[]
  jobs  Job[]

  categories Category[]

  workflows Workflow[]
  stages    Stage[]

  forms     Form[]
  questions Question[]

  scoreCards    ScoreCard[]
  cardQuestions CardQuestion[]

  emailTemplates EmailTemplate[]
  candidatePools CandidatePool[]

  stripeCustomerId       String?   @unique
  stripeSubscriptionId   String?   @unique
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?
}

model Job {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User?    @relation(fields: [createdById], references: [id])
  createdById String?

  title String
  slug  String

  country String
  state   String
  city    String

  remote     Boolean
  hidden     Boolean @default(false)
  showSalary Boolean @default(false)

  currency   String
  minSalary  Int
  maxSalary  Int
  salaryType SalaryType

  employmentType EmploymentType[]
  validThrough   DateTime?
  description    Json?

  postToGoogle Boolean @default(false)

  tokens Token[]
  users  JobUser[]

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  workflow   Workflow? @relation(fields: [workflowId], references: [id])
  workflowId String?

  form   Form?   @relation(fields: [formId], references: [id])
  formId String?

  scoreCards ScoreCardJobWorkflowStage[]

  interviews               Interview[]
  interviewDetails         InterviewDetail[]
  jobUserScheduleCalendars JobUserScheduleCalendar[]
  candidates               Candidate[]

  archived Boolean @default(false)

  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  @@unique([companyId, slug])
}

model InterviewDetail {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  interviewer   User   @relation(fields: [interviewerId], references: [id])
  interviewerId String

  duration Int

  job   Job    @relation(fields: [jobId], references: [id])
  jobId String

  workflowStage   WorkflowStage @relation(fields: [workflowStageId], references: [id])
  workflowStageId String

  @@unique([jobId, workflowStageId])
}

model JobUserScheduleCalendar {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  schedule   Schedule @relation(fields: [scheduleId], references: [id])
  scheduleId String

  calendar   Calendar? @relation(fields: [calendarId], references: [id])
  calendarId String?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  job   Job    @relation(fields: [jobId], references: [id])
  jobId String

  workflowStage   WorkflowStage @relation(fields: [workflowStageId], references: [id])
  workflowStageId String

  @@unique([jobId, workflowStageId, userId])
}

enum JobUserRole {
  OWNER
  ADMIN
  USER
}

model JobUser {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role JobUserRole

  job   Job    @relation(fields: [jobId], references: [id])
  jobId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([userId, jobId])
}

model Category {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User?    @relation(fields: [createdById], references: [id])
  createdById String?

  name String
  slug String

  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  jobs Job[]

  @@unique([companyId, slug])
}

model Workflow {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User?    @relation(fields: [createdById], references: [id])
  createdById String?

  name String
  slug String

  stages WorkflowStage[]
  jobs   Job[]

  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  factory Boolean @default(false)

  @@unique([companyId, slug])
}

model Stage {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User?    @relation(fields: [createdById], references: [id])
  createdById String?

  name String
  slug String

  allowEdit Boolean @default(true)

  workflows WorkflowStage[]

  // user   User @relation(fields: [userId], references: [id])
  // userId Int

  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  @@unique([companyId, slug])
}

model WorkflowStage {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order Int

  workflow   Workflow @relation(fields: [workflowId], references: [id])
  workflowId String

  stage   Stage  @relation(fields: [stageId], references: [id])
  stageId String

  scoreCards ScoreCardJobWorkflowStage[]
  scores     Score[]

  interviewers CandidateWorkflowStageInterviewer[]

  interviews               Interview[]
  interviewDetails         InterviewDetail[]
  jobUserScheduleCalendars JobUserScheduleCalendar[]
  candidates               Candidate[]
  comments                 Comment[]
  emails                   Email[]

  @@unique([workflowId, stageId])
  @@unique([workflowId, stageId, order])
}

model Form {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User?    @relation(fields: [createdById], references: [id])
  createdById String?

  name String
  slug String

  questions FormQuestion[]
  jobs      Job[]

  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  factory Boolean @default(false)

  @@unique([companyId, slug])
}

model Question {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User?    @relation(fields: [createdById], references: [id])
  createdById String?

  name String
  slug String

  placeholder   String           @default("")
  type          QuestionType     @default(Single_line_text)
  options       QuestionOption[]
  acceptedFiles String           @default("")

  factory Boolean @default(false)

  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  forms   FormQuestion[]
  answers Answer[]

  @@unique([companyId, slug])
}

model ScoreCard {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User?    @relation(fields: [createdById], references: [id])
  createdById String?

  name String
  slug String

  cardQuestions ScoreCardQuestion[]

  jobWorkflowStages ScoreCardJobWorkflowStage[]

  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  factory Boolean @default(false)

  @@unique([companyId, slug])
}

model CardQuestion {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User?    @relation(fields: [createdById], references: [id])
  createdById String?

  name    String
  slug    String
  factory Boolean @default(false)

  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  scoreCards ScoreCardQuestion[]

  @@unique([companyId, slug])
}

model ScoreCardQuestion {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order              Int
  behaviour          ScoreCardQuestionBehaviour @default(OPTIONAL)
  allowBehaviourEdit Boolean                    @default(true)

  scoreCard   ScoreCard @relation(fields: [scoreCardId], references: [id])
  scoreCardId String

  cardQuestion   CardQuestion @relation(fields: [cardQuestionId], references: [id])
  cardQuestionId String

  scores Score[]

  @@unique([scoreCardId, cardQuestionId])
  @@unique([scoreCardId, cardQuestionId, order])
}

enum ScoreCardQuestionBehaviour {
  REQUIRED
  OPTIONAL
  OFF
}

model ScoreCardJobWorkflowStage {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  scoreCard   ScoreCard @relation(fields: [scoreCardId], references: [id])
  scoreCardId String

  job   Job    @relation(fields: [jobId], references: [id])
  jobId String

  workflowStage   WorkflowStage @relation(fields: [workflowStageId], references: [id])
  workflowStageId String

  @@unique([scoreCardId, jobId, workflowStageId])
}

model Score {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rating Int
  note   String?

  scoreCardQuestion   ScoreCardQuestion @relation(fields: [scoreCardQuestionId], references: [id])
  scoreCardQuestionId String

  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId String

  workflowStage   WorkflowStage @relation(fields: [workflowStageId], references: [id])
  workflowStageId String

  @@unique([candidateId, scoreCardQuestionId, workflowStageId])
}

model QuestionOption {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text String

  question   Question @relation(fields: [questionId], references: [id])
  questionId String
}

enum QuestionType {
  Single_line_text
  Long_text
  Attachment
  Checkbox
  Multiple_select
  Single_select
  Date
  Phone_number
  Email
  URL
  Number
  Rating
}

model FormQuestion {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order              Int
  behaviour          FormQuestionBehaviour @default(OPTIONAL)
  allowBehaviourEdit Boolean               @default(true)

  form   Form   @relation(fields: [formId], references: [id])
  formId String

  question   Question @relation(fields: [questionId], references: [id])
  questionId String

  @@unique([formId, questionId])
  @@unique([formId, questionId, order])
}

enum FormQuestionBehaviour {
  REQUIRED
  OPTIONAL
  OFF
}

model Answer {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  value String

  question   Question @relation(fields: [questionId], references: [id])
  questionId String

  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId String

  @@unique([candidateId, questionId])
  @@unique([candidateId, questionId, value])
}

model CandidateWorkflowStageInterviewer {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId String

  workflowStage   WorkflowStage @relation(fields: [workflowStageId], references: [id])
  workflowStageId String

  interviewer   User   @relation(fields: [interviewerId], references: [id])
  interviewerId String

  @@unique([candidateId, workflowStageId])
}

model Candidate {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User?    @relation(fields: [createdById], references: [id])
  createdById String?

  name   String
  email  String
  resume Json?

  workflowStage   WorkflowStage? @relation(fields: [workflowStageId], references: [id])
  workflowStageId String?

  answers Answer[]
  scores  Score[]

  source CandidateSource

  job   Job    @relation(fields: [jobId], references: [id])
  jobId String

  interviewers CandidateWorkflowStageInterviewer[]

  interviews     Interview[]
  comments       Comment[]
  emails         Email[]
  candidatePools CandidatePool[]

  rejected Boolean @default(false)

  @@unique([jobId, email])
}

enum CandidateSource {
  Manual
  Careers_Page
}

model DefaultCalendar {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  calendar   Calendar @relation(fields: [calendarId], references: [id])
  calendarId String
}

enum CalendarType {
  CaldavDigest
  CaldavBasic
  GoogleCalendar
  OutlookCalendar
}

model Calendar {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  slug String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  caldavAddress     String?
  username          String?
  encryptedPassword String?
  refreshToken      String?

  type                     CalendarType
  defaultCalendars         DefaultCalendar[]
  jobUserScheduleCalendars JobUserScheduleCalendar[]

  @@unique([userId, slug])
}

model DailySchedule {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  day        String
  startTime  String
  endTime    String
  schedule   Schedule @relation(fields: [scheduleId], references: [id])
  scheduleId String

  @@unique([scheduleId, day])
}

model Schedule {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  slug String

  timezone                 String
  dailySchedules           DailySchedule[]
  user                     User                      @relation(fields: [userId], references: [id])
  userId                   String
  jobUserScheduleCalendars JobUserScheduleCalendar[]
  factory                  Boolean                   @default(false)

  @@unique([userId, slug])
}

model Interview {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  candidate       Candidate     @relation(fields: [candidateId], references: [id])
  candidateId     String
  job             Job           @relation(fields: [jobId], references: [id])
  jobId           String
  workflowStage   WorkflowStage @relation(fields: [workflowStageId], references: [id])
  workflowStageId String

  organizer      User     @relation(fields: [organizerId], references: [id], name: "organizerInterviews")
  organizerId    String
  interviewer    User     @relation(fields: [interviewerId], references: [id], name: "interviewerInterviews")
  interviewerId  String
  otherAttendees User[]
  startDateUTC   DateTime
  duration       Int

  calendarId   String @default("")
  eventId      String @default("")
  calendarLink String @default("")
  meetingLink  String @default("")
  cancelCode   String

  cancelled Boolean @default(false)
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text String

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId String

  workflowStage   WorkflowStage @relation(fields: [workflowStageId], references: [id])
  workflowStageId String

  parentComment   Comment?  @relation(fields: [parentCommentId], references: [id], name: "childComments", onDelete: Cascade)
  parentCommentId String?
  childComments   Comment[] @relation(name: "childComments")
}

model EmailTemplate {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User?    @relation(fields: [createdById], references: [id])
  createdById String?

  name String
  slug String

  subject String
  body    Json

  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  emails Email[]

  @@unique([companyId, slug])
}

model Email {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subject String
  cc      String?
  body    Json

  templateUsed EmailTemplate? @relation(fields: [templateId], references: [id])
  templateId   String?

  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId String

  workflowStage   WorkflowStage @relation(fields: [workflowStageId], references: [id])
  workflowStageId String

  sender   User   @relation(fields: [senderId], references: [id])
  senderId String
}

model CandidatePool {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User?    @relation(fields: [createdById], references: [id])
  createdById String?

  name String
  slug String

  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  candidates Candidate[]

  @@unique([companyId, slug])
}
