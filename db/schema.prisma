// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name           String
  email          String    @unique
  hashedPassword String?
  role           UserRole  @default(USER)
  tokens         Token[]
  sessions       Session[]
  isFirstSignup  Boolean   @default(true)

  parentCompanies ParentCompanyUser[]
  companies       CompanyUser[]
  jobs            JobUser[]

  calendars        Calendar[]
  defaultCalendars DefaultCalendar[]

  schedules        Schedule[]
  defaultSchedules DefaultSchedule[]

  // interviewDetails         InterviewDetail[]
  organizerInterviews      Interview[] @relation(name: "organizerInterviews")
  interviewerInterviews    Interview[] @relation(name: "interviewerInterviews")
  otherAttendeeInterview   Interview?  @relation(fields: [otherAttendeeInterviewId], references: [id])
  otherAttendeeInterviewId String?

  interviewCandidates CandidateStageInterviewer[]

  comments       Comment[]
  emails         Email[]
  candidateFiles CandidateFile[]

  stageUserScheduleCalendars StageUserScheduleCalendar[]

  createdJobs                  Job[]
  createdCategories            Category[]
  createdCompanies             Company[]
  createdStages                Stage[]             @relation(name: "createdBy")
  interviewingStage            Stage[]             @relation(name: "interviewer")
  createdFormQuestions         FormQuestion[]
  createdScoreCardQuestions    ScoreCardQuestion[]
  createdCandidates            Candidate[]
  createdEmailTemplates        EmailTemplate[]
  createdCandidatePools        CandidatePool[]
  candidateActivitiesPerformed CandidateActivity[]
  candidateUserNotes           CandidateUserNote[]
  coupons                      Coupon[]

  stripeCustomerId       String?   @unique
  stripeSubscriptionId   String?   @unique
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?
  stripeTrialStart       DateTime?
  stripeTrialEnd         DateTime?

  referredByAffiliate   Affiliate? @relation(fields: [referredByAffiliateId], references: [id])
  referredByAffiliateId String?
}

model Affiliate {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name  String?
  email String  @unique

  referredUsers User[]
}

model Coupon {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  couponSet    CouponSet          @default(SET_1)
  generatedFor CouponGeneratedFor @default(SELF)

  usdPrice Int @default(0)

  redeemedByUser   User?     @relation(fields: [redeemedByUserId], references: [id])
  redeemedByUserId String?
  redemptionDate   DateTime?
}

enum CouponSet {
  SET_1
}

enum CouponGeneratedFor {
  SELF
  APP_SUMO
}

enum UserRole {
  ADMIN
  USER
}

model Session {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Token {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  hashedToken String
  lastFour    String?
  type        TokenType
  expiresAt   DateTime
  sentTo      String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  job         Job?         @relation(fields: [jobId], references: [id])
  jobId       String?
  jobUserRole JobUserRole?

  company         Company?         @relation(fields: [companyId], references: [id])
  companyId       String?
  companyUserRole CompanyUserRole?

  parentCompany         ParentCompany?         @relation(fields: [parentCompanyId], references: [id])
  parentCompanyId       String?
  parentCompanyUserRole ParentCompanyUserRole?

  @@unique([hashedToken, type])
}

enum TokenType {
  RESET_PASSWORD
  INVITE_TO_COMPANY
  INVITE_TO_JOB
  PUBLIC_KEY
  SECRET_KEY
  CONFIRM_EMAIL
}

enum SalaryType {
  HOUR
  DAY
  WEEK
  MONTH
  YEAR
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACTOR
  TEMPORARY
  INTERN
  VOLUNTEER
  PER_DIEM
  OTHER
}

enum ParentCompanyUserRole {
  OWNER
  ADMIN
  USER
}

model ParentCompanyUser {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role ParentCompanyUserRole

  user   User   @relation(fields: [userId], references: [id])
  userId String

  parentCompany   ParentCompany @relation(fields: [parentCompanyId], references: [id])
  parentCompanyId String

  @@unique([userId, parentCompanyId])
}

enum CompanyUserRole {
  OWNER
  ADMIN
  USER
}

model CompanyUser {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role CompanyUserRole

  user   User   @relation(fields: [userId], references: [id])
  userId String

  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  @@unique([userId, companyId])
}

model ParentCompany {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String?
  slug String? @unique

  autoAddUsersToCompanies                 Boolean @default(true)
  newCandidatesVisibleOnlyToParentMembers Boolean @default(false)

  users     ParentCompanyUser[]
  companies Company[]
  tokens    Token[]

  emailTemplates EmailTemplate[]
  candidatePools CandidatePool[]
}

model Company {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User?    @relation(fields: [createdById], references: [id])
  createdById String?

  name    String
  slug    String  @unique
  // info    Json?
  info    String?
  website String?
  logo    Json?
  theme   String? @default("indigo")

  parentCompany   ParentCompany @relation(fields: [parentCompanyId], references: [id])
  parentCompanyId String

  tokens Token[]

  users CompanyUser[]
  jobs  Job[]

  // forms     Form[]
  // questions Question[]

  categories     Category[]
  emailTemplates EmailTemplate[]
  candidatePools CandidatePool[]
}

model Job {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User?    @relation(fields: [createdById], references: [id])
  createdById String?

  title String
  slug  String

  country String
  state   String
  city    String

  remoteOption RemoteOption @default(No_Remote)
  hidden       Boolean      @default(false)
  showSalary   Boolean      @default(false)

  currency   String     @default("")
  minSalary  Int        @default(0)
  maxSalary  Int        @default(0)
  salaryType SalaryType @default(YEAR)

  // validThrough   DateTime?

  jobType     JobType @default(FULL_TIME)
  description String?

  postToGoogle Boolean @default(false)

  tokens Token[]
  users  JobUser[]

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  stages        Stage[]
  formQuestions FormQuestion[]

  // form   Form?   @relation(fields: [formId], references: [id])
  // formId String?

  // scoreCards ScoreCardJobStage[]

  interviews Interview[]
  // interviewDetails         InterviewDetail[]
  // jobUserScheduleCalendars JobUserScheduleCalendar[]
  candidates Candidate[]

  archived Boolean @default(false)

  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  @@unique([companyId, slug])
}

enum RemoteOption {
  No_Remote
  Remote_Friendly
  Fully_Remote
}

// model InterviewDetail {
//   id        String   @id @default(cuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   interviewer   User   @relation(fields: [interviewerId], references: [id])
//   interviewerId String

//   duration Int

//   job   Job    @relation(fields: [jobId], references: [id])
//   jobId String

//   stage   Stage  @relation(fields: [stageId], references: [id], onDelete: Cascade)
//   stageId String

//   @@unique([jobId, stageId])
// }

model StageUserScheduleCalendar {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  schedule   Schedule @relation(fields: [scheduleId], references: [id])
  scheduleId String

  calendar   Calendar? @relation(fields: [calendarId], references: [id])
  calendarId String?

  stage   Stage  @relation(fields: [stageId], references: [id], onDelete: Cascade)
  stageId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([stageId, userId])
}

enum JobUserRole {
  OWNER
  ADMIN
  USER
}

model JobUser {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role JobUserRole

  job   Job    @relation(fields: [jobId], references: [id])
  jobId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([userId, jobId])
}

model Category {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User?    @relation(fields: [createdById], references: [id])
  createdById String?

  name String
  slug String

  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  jobs Job[]

  @@unique([companyId, slug])
}

model Stage {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User?    @relation(fields: [createdById], references: [id], name: "createdBy")
  createdById String?

  name      String
  slug      String
  order     Int
  allowEdit Boolean @default(true)

  job   Job    @relation(fields: [jobId], references: [id])
  jobId String

  scoreCardQuestions ScoreCardQuestion[]
  scores             Score[]

  // interviewDetails         InterviewDetail[]
  interviewer   User   @relation(fields: [interviewerId], references: [id], name: "interviewer")
  interviewerId String
  duration      Int

  candidateStageInterviewers CandidateStageInterviewer[]
  interviews                 Interview[]
  stageUserScheduleCalendars StageUserScheduleCalendar[]
  candidates                 Candidate[]
  comments                   Comment[]
  emails                     Email[]

  @@unique([jobId, slug])
  @@unique([jobId, name])
}

// model Form {
//   id          String   @id @default(cuid())
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
//   createdBy   User?    @relation(fields: [createdById], references: [id])
//   createdById String?

//   name String
//   slug String

//   questions FormQuestion[]
//   jobs      Job[]

//   company   Company @relation(fields: [companyId], references: [id])
//   companyId String

//   factory Boolean @default(false)

//   @@unique([companyId, slug])
// }

model FormQuestion {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User?    @relation(fields: [createdById], references: [id])
  createdById String?

  title String
  slug  String

  order              Int
  allowEdit          Boolean   @default(true)
  behaviour          Behaviour @default(OPTIONAL)
  allowBehaviourEdit Boolean   @default(true)

  placeholder   String               @default("")
  type          FormQuestionType     @default(Single_line_text)
  options       FormQuestionOption[]
  acceptedFiles String               @default("")

  job   Job    @relation(fields: [jobId], references: [id])
  jobId String

  answers Answer[]

  @@unique([jobId, slug])
}

model ScoreCardQuestion {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User?    @relation(fields: [createdById], references: [id])
  createdById String?

  title     String
  slug      String
  allowEdit Boolean @default(true)

  order Int

  stage   Stage  @relation(fields: [stageId], references: [id], onDelete: Cascade)
  stageId String

  behaviour          Behaviour @default(OPTIONAL)
  allowBehaviourEdit Boolean   @default(true)

  scores Score[]

  @@unique([stageId, slug])
}

model Score {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rating Int
  note   String?

  scoreCardQuestion   ScoreCardQuestion @relation(fields: [scoreCardQuestionId], references: [id], onDelete: Cascade)
  scoreCardQuestionId String

  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId String

  stage   Stage  @relation(fields: [stageId], references: [id], onDelete: Cascade)
  stageId String

  candidateActivityId String?

  @@unique([candidateId, scoreCardQuestionId, stageId])
}

model FormQuestionOption {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text String

  formQuestion   FormQuestion @relation(fields: [formQuestionId], references: [id], onDelete: Cascade)
  formQuestionId String
}

enum FormQuestionType {
  Single_line_text
  Long_text
  Attachment
  Checkbox
  Multiple_select
  Single_select
  Date
  Phone_number
  Email
  URL
  Number
  Rating
}

// model FormQuestion {
//   id        String   @id @default(cuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   order              Int
//   behaviour          Behaviour @default(OPTIONAL)
//   allowBehaviourEdit Boolean   @default(true)

//   job   Job    @relation(fields: [jobId], references: [id])
//   jobId String

//   question   Question @relation(fields: [questionId], references: [id])
//   questionId String

//   @@unique([jobId, questionId])
//   @@unique([jobId, questionId, order])
// }

enum Behaviour {
  REQUIRED
  OPTIONAL
  OFF
}

model Answer {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  value String

  formQuestion   FormQuestion @relation(fields: [formQuestionId], references: [id], onDelete: Cascade)
  formQuestionId String

  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId String

  @@unique([candidateId, formQuestionId])
  @@unique([candidateId, formQuestionId, value])
}

model CandidateStageInterviewer {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId String

  stage   Stage  @relation(fields: [stageId], references: [id], onDelete: Cascade)
  stageId String

  interviewer   User   @relation(fields: [interviewerId], references: [id])
  interviewerId String

  @@unique([candidateId, stageId])
}

model Candidate {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User?    @relation(fields: [createdById], references: [id])
  createdById String?

  name   String
  email  String
  resume Json?

  stage   Stage?  @relation(fields: [stageId], references: [id])
  stageId String?

  answers Answer[]
  files   CandidateFile[]

  source CandidateSource

  job   Job    @relation(fields: [jobId], references: [id])
  jobId String

  interviewers CandidateStageInterviewer[]

  scores     Score[]
  interviews Interview[]
  comments   Comment[]
  emails     Email[]

  candidatePools CandidatePool[]

  rejected                   Boolean @default(false)
  visibleOnlyToParentMembers Boolean @default(false)

  activities         CandidateActivity[]
  candidateUserNotes CandidateUserNote[]

  @@unique([jobId, email])
}

model CandidateUserNote {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId String

  // note Json?
  note String?

  @@unique([candidateId, userId])
}

model CandidateActivity {
  id          String   @id @default(cuid())
  performedAt DateTime @default(now())

  title String
  type  CandidateActivityType

  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId String

  performedByUser   User?   @relation(fields: [performedByUserId], references: [id])
  performedByUserId String?
}

enum CandidateActivityType {
  Candidate_Added
  Candidate_Updated
  Candidate_Rejected
  Candidate_Restored
  Score_Submitted
  Interviewer_Changed
  Stage_Changed
  Interview_Scheduled
  Interview_Cancelled
  Comment_Added
  Comment_Replied
  Comment_Edited
  Comment_Deleted
  Email_Sent
  Email_Deleted
  Added_To_Pool
  Removed_From_Pool
  File_Added
  File_Deleted
}

model CandidateFile {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  createdBy   User?    @relation(fields: [createdById], references: [id])
  createdById String?

  attachment Json

  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId String
}

enum CandidateSource {
  Manual
  Careers_Page
}

model DefaultCalendar {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  calendar   Calendar @relation(fields: [calendarId], references: [id])
  calendarId String
}

enum CalendarType {
  CaldavDigest
  CaldavBasic
  GoogleCalendar
  OutlookCalendar
}

model Calendar {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  slug String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  caldavAddress     String?
  username          String?
  encryptedPassword String?
  refreshToken      String?

  type                       CalendarType
  defaultCalendars           DefaultCalendar[]
  stageUserScheduleCalendars StageUserScheduleCalendar[]

  @@unique([userId, slug])
}

model DailySchedule {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  day        String
  startTime  String
  endTime    String
  schedule   Schedule @relation(fields: [scheduleId], references: [id])
  scheduleId String

  @@unique([scheduleId, day])
}

model Schedule {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  slug String

  timezone                   String
  dailySchedules             DailySchedule[]
  user                       User                        @relation(fields: [userId], references: [id])
  userId                     String
  stageUserScheduleCalendars StageUserScheduleCalendar[]

  defaultSchedules DefaultSchedule[]

  @@unique([userId, slug])
}

model DefaultSchedule {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  schedule   Schedule @relation(fields: [scheduleId], references: [id])
  scheduleId String
}

model Interview {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId String
  job         Job       @relation(fields: [jobId], references: [id])
  jobId       String
  stage       Stage     @relation(fields: [stageId], references: [id])
  stageId     String

  organizer      User     @relation(fields: [organizerId], references: [id], name: "organizerInterviews")
  organizerId    String
  interviewer    User     @relation(fields: [interviewerId], references: [id], name: "interviewerInterviews")
  interviewerId  String
  otherAttendees User[]
  startDateUTC   DateTime
  duration       Int

  calendarId   String @default("")
  eventId      String @default("")
  calendarLink String @default("")
  meetingLink  String @default("")
  cancelCode   String

  cancelled Boolean @default(false)
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text String

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId String

  stage   Stage  @relation(fields: [stageId], references: [id], onDelete: Cascade)
  stageId String

  parentComment   Comment?  @relation(fields: [parentCommentId], references: [id], name: "childComments", onDelete: Cascade)
  parentCommentId String?
  childComments   Comment[] @relation(name: "childComments")
}

model EmailTemplate {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User?    @relation(fields: [createdById], references: [id])
  createdById String?

  name String
  slug String

  subject String
  body    Json

  company   Company? @relation(fields: [companyId], references: [id])
  companyId String?

  parentCompany   ParentCompany? @relation(fields: [parentCompanyId], references: [id])
  parentCompanyId String?

  emails Email[]

  @@unique([companyId, slug])
  @@unique([parentCompanyId, slug])
}

model Email {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subject String
  cc      String?
  body    Json

  templateUsed EmailTemplate? @relation(fields: [templateId], references: [id])
  templateId   String?

  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId String

  stage   Stage  @relation(fields: [stageId], references: [id], onDelete: Cascade)
  stageId String

  sender   User   @relation(fields: [senderId], references: [id])
  senderId String
}

model CandidatePool {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User?    @relation(fields: [createdById], references: [id])
  createdById String?

  name String
  slug String

  company   Company? @relation(fields: [companyId], references: [id])
  companyId String?

  parentCompany   ParentCompany? @relation(fields: [parentCompanyId], references: [id])
  parentCompanyId String?

  candidates Candidate[]

  @@unique([companyId, slug])
  @@unique([parentCompanyId, slug])
}
